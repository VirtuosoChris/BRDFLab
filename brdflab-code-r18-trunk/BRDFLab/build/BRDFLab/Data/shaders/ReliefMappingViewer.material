/*
	Copyright (c) 2009.
		Adria Fores
		Sumanta N. Pattanaik
		Carles Bosch
		Xavier Pueyo

	Contact: adriafores@gmail.com	

	This file is part of BRDFLab.

    BRDFLab is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BRDFLab is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BRDFLab.  If not, see <http://www.gnu.org/licenses/>.
*/

// GLSL Vertex shader definition
vertex_program reliefMappingViewer_VS glsl
{
	source reliefMappingViewer_VS.glsl
	
	default_params
	{
//		param_named_auto worldMatrix world_matrix
		param_named_auto eyePos camera_position
		param_named_auto lightPos light_position 0
	}	
	
}

fragment_program reliefMappingViewer_PS glsl
{
	source reliefMappingViewer_PS.glsl
	
		
	default_params
	{
//		param_named_auto worldMatrix world_matrix
//		param_named_auto eyePos camera_position
//		param_named_auto lightPos light_position 0
	}	
}


material reliefMappingViewer
{


    // Material has one technique
	technique
	{
        // This technique has one pass
		pass
		{
            // Make this pass use the vertex shader defined above
			vertex_program_ref reliefMappingViewer_VS	
			{
			}
            // Make this pass use the pixel shader defined above
			fragment_program_ref reliefMappingViewer_PS	
			{
			}
		}
	}
}


// GLSL Vertex shader definition
vertex_program spheresViewer_VS glsl
{
	source spheresViewer_VS.glsl
	
	default_params
	{
		param_named_auto worldMatrix world_matrix
//		param_named_auto eyePos camera_position
//		param_named_auto lightPos light_position 0
	}	
	
}

fragment_program spheresViewer_PS glsl
{
	source spheresViewer_PS.glsl
	
		
	default_params
	{
//		param_named_auto worldMatrix world_matrix
		param_named_auto eyePos camera_position
		param_named_auto lightPos light_position 0
	}	
}


material spheresViewer
{


    // Material has one technique
	technique
	{
        // This technique has one pass
		pass
		{
            // Make this pass use the vertex shader defined above
			vertex_program_ref spheresViewer_VS	
			{
			}
            // Make this pass use the pixel shader defined above
			fragment_program_ref spheresViewer_PS	
			{
			}
		}
	}
}


// GLSL Vertex shader definition
vertex_program trianglesViewer_VS glsl
{
	source trianglesViewer_VS.glsl
	
	default_params
	{
		param_named_auto worldMatrix world_matrix
//		param_named_auto eyePos camera_position
//		param_named_auto lightPos light_position 0
	}	
	
}

fragment_program trianglesViewer_PS glsl
{
	source trianglesViewer_PS.glsl
	
		
	default_params
	{
//		param_named_auto worldMatrix world_matrix
		param_named_auto eyePos camera_position
		param_named_auto lightPos light_position 0
	}	
}


material trianglesViewer
{


    // Material has one technique
	technique
	{
        // This technique has one pass
		pass
		{
            // Make this pass use the vertex shader defined above
			vertex_program_ref trianglesViewer_VS	
			{
			}
            // Make this pass use the pixel shader defined above
			fragment_program_ref trianglesViewer_PS	
			{
			}
		}
	}
}